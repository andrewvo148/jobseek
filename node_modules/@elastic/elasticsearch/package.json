{
  "_from": "@elastic/elasticsearch",
  "_id": "@elastic/elasticsearch@7.2.0",
  "_inBundle": false,
  "_integrity": "sha512-n4t7XX5NLf4KuFVx7h/0V3WgF5BLRWUDvRyYMf+iRbR2dvZSD3BFYSqw757uDcXOE5lnxhJHBoT6CptpA6HW0g==",
  "_location": "/@elastic/elasticsearch",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@elastic%2felasticsearch",
    "fetchSpec": "latest",
    "name": "@elastic/elasticsearch",
    "raw": "@elastic/elasticsearch",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@elastic",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@elastic/elasticsearch/-/elasticsearch-7.2.0.tgz",
  "_shasum": "c200090b3164733affc960c6e09a8c650dc7a45a",
  "_spec": "@elastic/elasticsearch",
  "_where": "/home/andrew/my-work/jobseek",
  "author": {
    "name": "Tomas Della Vedova"
  },
  "bugs": {
    "url": "https://github.com/elastic/elasticsearch-js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^4.1.1",
    "decompress-response": "^4.2.0",
    "into-stream": "^5.1.0",
    "ms": "^2.1.1",
    "once": "^1.4.0",
    "pump": "^3.0.0"
  },
  "deprecated": false,
  "description": "The official Elasticsearch client for Node.js",
  "devDependencies": {
    "@types/node": "^11.13.7",
    "codecov": "^3.3.0",
    "convert-hrtime": "^3.0.0",
    "dedent": "^0.7.0",
    "deepmerge": "^3.2.0",
    "dezalgo": "^1.0.3",
    "js-yaml": "^3.13.1",
    "license-checker": "^25.0.1",
    "lolex": "^4.0.1",
    "minimist": "^1.2.0",
    "ora": "^3.4.0",
    "pretty-hrtime": "^1.0.3",
    "rimraf": "^2.6.3",
    "semver": "^6.0.0",
    "simple-git": "^1.110.0",
    "simple-statistics": "^7.0.2",
    "split2": "^3.1.1",
    "standard": "^12.0.1",
    "stoppable": "^1.1.0",
    "tap": "^13.0.1",
    "typescript": "^3.4.5",
    "workq": "^2.1.0"
  },
  "engines": {
    "node": ">=8"
  },
  "homepage": "http://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html",
  "keywords": [
    "elasticsearch",
    "elastic",
    "kibana",
    "mapping",
    "REST",
    "search",
    "client",
    "index"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "@elastic/elasticsearch",
  "optionalDependencies": {},
  "original-author": {
    "company": "Elasticsearch BV",
    "name": "Spencer Alger"
  },
  "readme": "<img align=\"right\" width=\"auto\" height=\"auto\" src=\"https://www.elastic.co/static-res/images/elastic-logo-200.png\">\n\n# @elastic/elasticsearch\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)  [![Build Status](https://clients-ci.elastic.co/job/elastic+elasticsearch-js+master/badge/icon)](https://clients-ci.elastic.co/job/elastic+elasticsearch-js+master/)  [![codecov](https://codecov.io/gh/elastic/elasticsearch-js/branch/master/graph/badge.svg)](https://codecov.io/gh/elastic/elasticsearch-js)  [![NPM downloads](https://img.shields.io/npm/dm/@elastic/elasticsearch.svg?style=flat)](https://www.npmjs.com/package/@elastic/elasticsearch)\n\n---\n\n**Note:** In the past months we have worked on the new Elasticsearch Node.js client, and if you want you can already try it by following the instructions below, while if you're going to use the legacy one or report an issue, please check out [elastic/elasticsearch-js-legacy](https://github.com/elastic/elasticsearch-js-legacy).\n\n---\n\nThe official Node.js client for Elasticsearch.\n\n## Features\n- One-to-one mapping with REST API.\n- Generalized, pluggable architecture.\n- Configurable, automatic discovery of cluster nodes.\n- Persistent, Keep-Alive connections.\n- Load balancing (with pluggable selection strategy) across all available nodes.\n- TypeScript support out of the box.\n\n## Install\n```\nnpm install @elastic/elasticsearch\n```\n\n### Compatibility\n\nThe minimum supported version of Node.js is `v8`.\n\nThe library is compatible with all Elasticsearch versions since 5.x, but you should use the same major version of the Elasticsearch instance that you are using.\n```\n# Elasticsearch 7.x\n@elastic/elasticsearch@7\n\n# Elasticsearch 6.x\n@elastic/elasticsearch@6\n\n# Elasticsearch 5.x\n@elastic/elasticsearch@5\n```\n\n#### Install multiple versions\nIf you are using multiple versions of Elasticsearch, you need to use multiple versions of the client. In the past, install multiple versions of the same package was not possible, but with `npm v6.9`, you can do that via aliasing.\n\nThe command you must run to install different version of the client is:\n```sh\nnpm install <alias>@npm:@elastic/elasticsearch@<version>\n```\nSo for example if you need to install `7.x` and `6.x`, you will run\n```sh\nnpm install es6@npm:@elastic/elasticsearch@6\nnpm install es7@npm:@elastic/elasticsearch@7\n```\nAnd your `package.json` will look like the following:\n```json\n\"dependencies\": {\n  \"es6\": \"npm:@elastic/elasticsearch@^6.7.0\",\n  \"es7\": \"npm:@elastic/elasticsearch@^7.0.0\"\n}\n```\nAnd finally, you will require the packages from your code by using the alias you have defined.\n```js\nconst { Client: Client6 } = require('es6')\nconst { Client: Client7 } = require('es7')\n\nconst client6 = new Client6({ node: 'http://localhost:9200' })\nconst client7 = new Client7({ node: 'http://localhost:9201' })\n\nclient6.info(console.log)\nclient7.info(console.log)\n```\n\nFinally, if you want to install the client for the next version of Elasticsearch *(the one that lives in Elasticsearchâ€™s master branch)*, you can use the following command:\n```sh\nnpm install esmaster@github:elastic/elasticsearch-js\n```\n\n## Usage\n\nYou can find the full documentation in our [docs](https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html) website.\n\n```js\nconst { Client } = require('@elastic/elasticsearch')\nconst client = new Client({ node: 'http://localhost:9200' })\n\n// promise API\nconst result = await client.search({\n  index: 'my-index',\n  body: { foo: 'bar' }\n})\n\n// callback API\nclient.search({\n  index: 'my-index',\n  body: { foo: 'bar' }\n}, (err, result) => {\n  if (err) console.log(err)\n})\n```\nThe returned value of **every** API call is formed as follows:\n```ts\n{\n  body: object | boolean\n  statusCode: number\n  headers: object\n  warnings: [string]\n  meta: object\n}\n```\n### Client options\n\nThe client is designed to be easily configured as you see fit for your needs, following you can see all the possible options that you can use to configure it.\n\n```ts\n{\n  // the Elasticsearch endpoint to use\n  node: string | string[];\n  // alias of above\n  nodes: string | string[];\n  // custom connection class\n  Connection: typeof Connection;\n  // custom connection pool class\n  ConnectionPool: typeof ConnectionPool;\n  // custom transport class\n  Transport: typeof Transport;\n  // custom serializer class\n  Serializer: typeof Serializer;\n  // max number of retries for each request\n  maxRetries: number;\n  // max request timeout for each request\n  requestTimeout: number;\n  // max ping timeout for each request\n  pingTimeout: number;\n  // perform a sniff operation every `n` milliseconds\n  sniffInterval: number;\n  // perform a sniff once the client is started\n  sniffOnStart: boolean;\n  // custom sniff endpoint, defaults `_nodes/_all/http`\n  sniffEndpoint: string;\n  // perform a sniff on connection fault\n  sniffOnConnectionFault: boolean;\n  // configurethe node resurrection strategy, default `ping`\n  resurrectStrategy: 'ping' | 'optimistic' | 'none';\n  // adds `accept-encoding` header to every request\n  suggestCompression: boolean;\n  // enable gzip request body compression\n  compression: 'gzip';\n  // ssl configuraton\n  ssl: http.SecureContextOptions;\n  // http agent options\n  agent: http.AgentOptions;\n  // filters which node not to use for a request\n  nodeFilter: nodeFilterFn;\n  // custom selection strategy, defaults `round-robin`\n  nodeSelector: nodeSelectorFn | string;\n  // function to generate the request id for every request\n  generateRequestId: generateRequestIdFn;\n  // name to identify the client instance in the events\n  name: string;\n}\n```\n\n### Request specific options\nIf needed you can pass request specific options in a second object:\n```js\n// promise API\nconst result = await client.search({\n  index: 'my-index',\n  body: { foo: 'bar' }\n}, {\n  ignore: [404],\n  maxRetries: 3\n})\n```\nThe supported *request specific options* are:\n```ts\n{\n  ignore: [number], // default `null`\n  requestTimeout: number, // client default\n  maxRetries: number, // default `5`\n  asStream: boolean, // default `false`\n  compression: string, // default `false`\n  headers: object, // default `null`\n  querystring: object // default `null`,\n  context: object // default `null`,\n  id: any // default incr. integer\n}\n```\n\n## License\n\nThis software is licensed under the [Apache 2 license](./LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/elastic/elasticsearch-js.git"
  },
  "scripts": {
    "ci": "npm run license-checker && npm test && npm run test:integration && npm run test:coverage",
    "license-checker": "license-checker --production --onlyAllow='MIT;Apache-2.0;Apache1.1;ISC;BSD-3-Clause;BSD-2-Clause'",
    "lint": "standard",
    "lint:fix": "standard --fix",
    "test": "npm run lint && npm run test:unit && npm run test:behavior && npm run test:types",
    "test:behavior": "tap test/behavior/*.test.js -t 300 --no-coverage",
    "test:coverage": "nyc npm run test:unit && nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "test:integration": "tap test/integration/index.js -T --harmony --no-esm --no-coverage",
    "test:types": "tsc --project ./test/types/tsconfig.json",
    "test:unit": "tap test/unit/*.test.js -t 300 --no-coverage"
  },
  "types": "index.d.ts",
  "version": "7.2.0"
}
